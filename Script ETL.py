# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ahDT0HKDX8PX0umVuKFvK0A43-aspKxx
"""

#09-08-2023
#Jamith Bolaños Vidal
#Script de ETL en python
#Prueba DA Jikkisoft.
pip install pandas mysql-connector-python

import pandas as pd
import mysql.connector
from mysql.connector import Error

def extract_data(file_paths):
    """Extracción de datos desde archivos CSV"""
    data = {}
    try:
        for file_name, path in file_paths.items():
            data[file_name] = pd.read_csv(path)
            print(f"Datos extraídos de {file_name} exitosamente")
        return data
    except Exception as e:
        print(f"Error al extraer datos: {e}")
        return None

def transform_data(data):
    """Transformación de datos: limpieza, mapeo y agregaciones"""
    try:
        # Eliminación de duplicados y mapeo de campos
        # Suponiendo que 'sales_data.csv' tiene una columna 'total' que necesita agregación
        sales = data['sales_data.csv'].drop_duplicates()
        customers = data['customers.csv'].drop_duplicates()
        products = data['products.csv'].drop_duplicates()

        # Agregación de ventas totales por cliente
        aggregated_sales = sales.groupby('customer_id').agg({
            'total': 'sum'
        }).reset_index()

        # Mapeo de campos para la carga en la base de datos
        sales_transformed = sales.rename(columns={
            'transaction_id': 'transaction_id',
            'customer_id': 'customer_id',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'price': 'price',
            'total': 'total',
            'date': 'date'
        })

        print("Datos transformados exitosamente")
        return sales_transformed, aggregated_sales, customers, products
    except Exception as e:
        print(f"Error al transformar datos: {e}")
        return None, None, None, None

def load_data(connection, sales, aggregated_sales, customers, products):
    """Carga de datos en una base de datos MySQL"""
    try:
        cursor = connection.cursor()

        # Cargar datos de ventas
        for index, row in sales.iterrows():
            query = """
            INSERT INTO sales (transaction_id, customer_id, product_id, quantity, price, total, date)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(query, (row['transaction_id'], row['customer_id'], row['product_id'],
                                   row['quantity'], row['price'], row['total'], row['date']))

        # Cargar ventas agregadas por cliente
        for index, row in aggregated_sales.iterrows():
            query = """
            INSERT INTO customer_sales_summary (customer_id, total_sales)
            VALUES (%s, %s)
            """
            cursor.execute(query, (row['customer_id'], row['total']))

        # Cargar datos de clientes
        for index, row in customers.iterrows():
            query = """
            INSERT INTO customers (customer_id, first_name, last_name, email, phone, created_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            """
            cursor.execute(query, (row['customer_id'], row['first_name'], row['last_name'],
                                   row['email'], row['phone'], row['created_at']))

        # Cargar datos de productos
        for index, row in products.iterrows():
            query = """
            INSERT INTO products (product_id, product_name, category, stock, price)
            VALUES (%s, %s, %s, %s, %s)
            """
            cursor.execute(query, (row['product_id'], row['product_name'], row['category'],
                                   row['stock'], row['price']))

        connection.commit()
        print("Datos cargados exitosamente")
    except Error as e:
        print(f"Error al cargar datos: {e}")
        connection.rollback()
    finally:
        if cursor:
            cursor.close()

def connect_to_db():
    """Establece la conexión con la base de datos y retorna el objeto conexión"""
    try:
        connection = mysql.connector.connect(
            host='127.0.0.1',        # DB_HOST
            port=3306,               # DB_PORT
            database='academic_db',  # DB_DATABASE
            user='root',             # DB_USERNAME
            password=''              # DB_PASSWORD (vacío)
        )
        if connection.is_connected():
            print("Conexión exitosa a la base de datos")
            return connection
    except Error as e:
        print(f"Error al conectar a la base de datos: {e}")
        return None

def main():
    # Rutas de los archivos CSV
    file_paths = {
        'sales_data.csv': 'sales_data.csv',
        'customers.csv': 'customers.csv',
        'products.csv': 'products.csv'
    }

    # Proceso ETL
    data = extract_data(file_paths)
    if data:
        sales_transformed, aggregated_sales, customers, products = transform_data(data)
        if sales_transformed is not None and aggregated_sales is not None:
            connection = connect_to_db()
            if connection:
                load_data(connection, sales_transformed, aggregated_sales, customers, products)
                connection.close()

if __name__ == "__main__":
    main()